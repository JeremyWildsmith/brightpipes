func failCondition(pipe) {
	var isFail;	

	switch (pipe.exit) {
		case 'up':
			if (grid(pipe.x, pipe.y + 1) == empty)
				isFail = true;
			else 
				isFail = false;
			break;
		case 'right':
			if (grid(pipe.x, pipe.y) == empty)
				isFail = true;
			else 
				isFail = false;
			break;
		case 'down':
			if (grid(pipe.x, pipe.y - 1) == empty)
				isFail = true;
			else 
				isFail = false;
			break;
		case 'left':
			if (grid(pipe.x, pipe.y + 1) == empty)
				isFail = true;
			else 
				isFail = false;
			break;
	}
	
	return isFail;
}

func passCondition(pipe, endPipe) {
	var isPass;

	switch (pipe.exit) {
		case 'up':
			if (grid(pipe.x, pipe.y + 1) == endPipe)
				isPass = true;
			else 
				isPass = false;
			break;
		case 'right':
			if (grid(pipe.x, pipe.y) == endPipe)
				isPass = true;
			else 
				isPass = false;
			break;
		case 'down':
			if (grid(pipe.x, pipe.y - 1) == endPipe)
				isPass = true;
			else 
				isPass = false;
			break;
		case 'left':
			if (grid(pipe.x, pipe.y + 1) == endPipe)
				isPass = true;
			else 
				isPass = false;
			break;
	}
	
	return isPass;
)